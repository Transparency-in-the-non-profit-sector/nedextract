<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="27" time="63.240" timestamp="2023-08-11T10:46:36.977229" hostname="Ls-MacBook-Pro.home"><testcase classname="tests.test_classify_organisations.TestClassifyOrganisations" name="test_file_to_pd" time="0.378" /><testcase classname="tests.test_classify_organisations.TestClassifyOrganisations" name="test_predict_main_sector" time="0.438" /><testcase classname="tests.test_classify_organisations.TestClassifyOrganisations" name="test_train" time="0.025" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_append_p_position" time="0.000" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_array_p_position" time="0.000" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_check_bestuur" time="0.000" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_check_rvt" time="0.000" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_director_check" time="0.001" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_extract_persons" time="0.092" /><testcase classname="tests.test_extract_persons.TestExtractPersons" name="test_identify_potential_people" time="0.016" /><testcase classname="tests.test_extract_related_orgs.TestExtractRelatedOrgas" name="test_apply_matching" time="0.003" /><testcase classname="tests.test_extract_related_orgs.TestExtractRelatedOrgas" name="test_collect_orgs" time="2.604" /><testcase classname="tests.test_extract_related_orgs.TestExtractRelatedOrgas" name="test_decide_org" time="0.143"><failure message="AssertionError: 'maybe' is not false">self = &lt;tests.test_extract_related_orgs.TestExtractRelatedOrgas testMethod=test_decide_org&gt;

    def test_decide_org(self):
        """Unit test for the function decide_org.
    
        Function that tests the function decide_orgs that defines a decision tree to determine if a mentioned organisations
        is likely a true organisation.
    
        Nine assertion tests are defined that test for various test names, if the expected result is returned
        for different percentage the organisation was found as org, and the total number of times the organisaiont was
        found in the text.
    
        Returns:
            AssertionError: If any of tests does not returns the expected retult.
        """
        # initalisations
        org = 'Bedrijf'
        org_pp = np.array(['Bedrijf'])
        org_c = np.array(['Bedrijf'])
    
        # Test case 1
        pco = ((50, 6), (50, 6))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertTrue(final)
    
        # Test case 2
        pco = ((50, 3), (50, 3))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertFalse(final)
    
        # Test case 3
        pco = ((70, 3), (70, 3))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertTrue(final)
    
        # Test case 4
        pco = ((100, 1), (100, 1))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertEqual(final, 'maybe')
    
        # Test case 5
        pco = ((0, 1), (100, 1))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertEqual(final, 'maybe')
    
        # Test case 6
        pco = ((100, 1), (0, 1))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertEqual(final, 'no')
    
        # Test case 7
        pco = ((0, 0), (0, 0))
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertFalse(final)
    
        # Test case 8
        pco = ((0, 1), (0, 1))
        org = 'Stichting Huppeldepup'
        org_pp = ['Stichting Huppeldepup']
        final = decide_org(org, pco, org_pp, org_c, nlp)
        self.assertEqual(final, 'maybe')
    
        # Test case 9
        pco = ((0, 0), (0, 0))
        org = 'Stichting Huppeldepup'
        org_pp = ['Stichting Huppeldepup']
        org_c = np.array(['Bedrijf'])
        final = decide_org(org, pco, org_pp, org_c, nlp)
&gt;       self.assertFalse(final)
E       AssertionError: 'maybe' is not false

tests/test_extract_related_orgs.py:122: AssertionError</failure></testcase><testcase classname="tests.test_extract_related_orgs.TestExtractRelatedOrgas" name="test_match_anbis" time="0.008" /><testcase classname="tests.test_name_analysis.TestExtractPersons" name="test_abbreviate" time="0.001" /><testcase classname="tests.test_name_analysis.TestExtractPersons" name="test_find_duplicate_persons" time="0.002" /><testcase classname="tests.test_name_analysis.TestExtractPersons" name="test_get_tsr" time="0.001" /><testcase classname="tests.test_name_analysis.TestExtractPersons" name="test_strip_names_from_title" time="0.000" /><testcase classname="tests.test_preprocessing.UnitTestsPreprocessing" name="test_delete_downloaded_pdf" time="0.529" /><testcase classname="tests.test_preprocessing.UnitTestsPreprocessing" name="test_download_pdf" time="0.188" /><testcase classname="tests.test_preprocessing.UnitTestsPreprocessing" name="test_preprocess_pdf" time="0.040" /><testcase classname="tests.test_read_pdf.TestReadPDF" name="test_atc" time="0.001" /><testcase classname="tests.test_read_pdf.TestReadPDF" name="test_extract_pdf" time="15.596" /><testcase classname="tests.test_read_pdf.TestReadPDF" name="test_ots" time="0.000" /><testcase classname="tests.test_read_pdf.TestReadPDF" name="test_ouput_people" time="2.004" /><testcase classname="tests.test_read_pdf.TestReadPDF" name="test_stanza_NL" time="0.001" /><testcase classname="tests.test_run_auto_extract.TestRunAutoExtract" name="test_main" time="21.433" /></testsuite></testsuites>